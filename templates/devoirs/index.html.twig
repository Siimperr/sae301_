<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Index</title>
    <link rel="stylesheet" href="{{ asset('/asset/css/style.css') }}">
</head>

<body>

<?php
require (' {{ asset('/asset/composants/header.php') }} ');
?>

<!-- Ajoutez le bouton avec le menu déroulant -->
<div class="fil"><div class="dropdown">
        <button onclick="toggleSortOptions()" class="dropbtn">Trier par</button>
        <div id="sortOptions" class="dropdown-content">
            <a href="#" onclick="sortCountdowns('recent')">Date récente</a>
            <a href="#" onclick="sortCountdowns('ancient')">Date ancienne</a>
            <a href="#" onclick="sortCountdowns('ue')">UE</a>
            <a href="#" onclick="sortCountdowns('prof')">Professeur</a>
        </div>
    </div>

    <input class="search" type="text" id="searchInput" placeholder="Rechercher..."/>
    <button  class="loupe" onclick="searchCountdowns()"><img src="images/loupe.png" alt="loupe"></button>
</div>
<div id="timers"></div>

<button onclick="goToCountdownPage()">Ajouter un devoir</button>

    <!-- Élément pour afficher le message et le bouton "Compris" -->
    <div id="messageContainer">
        <p id="searchMessage"></p>
        <button id="comprisButton" style="display: none;" onclick="showTimers()">Compris</button>
    </div>

    <script>
        let countdowns; // Déclarez la variable globale pour stocker les compteurs
        let timersVisible = true; // Variable de contrôle pour afficher/masquer les timers


        // Charger les compteurs depuis le serveur après le chargement de la page
        loadCountdownsFromServer();

        function loadCountdownsFromServer() {
            // Utiliser une requête AJAX pour récupérer les compteurs depuis le serveur (par exemple, avec fetch())
            fetch('get_countdowns.php')
                .then(response => response.json())
                .then(data => {
                    countdowns = data; // Assurez-vous de stocker les compteurs dans la variable globale
                    updateTimers(countdowns);
                    reloadTimers = true; // Définissez la variable de contrôle à true après le chargement initial
                })
                .catch(error => console.error('Error fetching countdowns:', error));
        }


        function goToCountdownPage() {
            window.location.href = '/ajouter';
        }

        // Définition de la fonction de recherche
        function searchCountdowns() {
            const searchValue = document.getElementById('searchInput').value.toLowerCase();
            const timersElement = document.getElementById('timers');
            const messageContainer = document.getElementById('messageContainer');
            const searchMessage = document.getElementById('searchMessage');
            const comprisButton = document.getElementById('comprisButton');

            // Masquer les timers existants
            timersElement.innerHTML = '';

            // Assurez-vous que countdowns est défini avant de filtrer
            if (countdowns) {
                // Filtrez les countdowns pour ceux qui contiennent la valeur de recherche
                const filteredCountdowns = countdowns.filter(countdown => {
                    // Combine toutes les propriétés en une chaîne et recherche dans cette chaîne
                    const timerInfo = Object.values(countdown).join(' ').toLowerCase();
                    return timerInfo.includes(searchValue);
                });

                // Mettez à jour les timers avec les compteurs filtrés ou affichez un message approprié
                if (filteredCountdowns.length > 0) {
                    updateTimers(filteredCountdowns);

                    // Masquer le message et le bouton "Compris" s'ils sont visibles
                    messageContainer.style.display = 'none';
                    comprisButton.style.display = 'none';

                    // Mettez la variable de contrôle à true
                    timersVisible = true;
                } else {
                    // Afficher le message et le bouton "Compris"
                    searchMessage.textContent = "Pas de devoir pour votre recherche.";
                    messageContainer.style.display = 'block';
                    comprisButton.style.display = 'block';

                    // Mettez la variable de contrôle à false pour empêcher l'affichage des timers
                    timersVisible = false;
                }
            }
        }


        // Fonction pour afficher les timers après avoir appuyé sur "Compris"
        function showTimers() {
            const messageContainer = document.getElementById('messageContainer');
            const comprisButton = document.getElementById('comprisButton');

            messageContainer.style.display = 'none';
            comprisButton.style.display = 'none';

            // Mettez la variable de contrôle à true
            timersVisible = true;

            // Rechargez tous les timers seulement si la variable de contrôle "reloadTimers" est définie à true
            if (reloadTimers) {
                loadCountdownsFromServer();
                reloadTimers = false; // Réinitialisez la variable de contrôle après le chargement initial
            }
        }

        let reloadTimers = true; // Ajoutez une variable de contrôle pour déterminer si les timers doivent être rechargés

    </script>
    <script src={{ asset('/asset/css/style.css') }}></script>
</body>
<footer>
    <p>&copy; 2023 EduBook.com <br><a href="contact.php">Contactez nous</a></p>
</footer>
</html>
